repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: debug-statements
        name: Check for debug statements
      - id: check-docstring-first
        name: Check docstring is first

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        name: Format code with Black
        language_version: python3
        args: [--line-length=88]

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports with isort
        args: [--profile=black, --line-length=88]

  # Python static type checking (simplified to avoid dependency issues)
  - repo: local
    hooks:
      - id: mypy-check
        name: Static type checking with MyPy
        entry: mypy
        args: [--ignore-missing-imports, --no-strict-optional, src/]
        language: system
        pass_filenames: false

  # Python security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: Security checks with Bandit
        args: [-r, -x, tests/]
        exclude: ^tests/

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        name: Lint code with flake8
        additional_dependencies: [flake8-docstrings]
        args: [--max-line-length=88, --extend-ignore=E203,W503,D100,D101,D102,D103,D104]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.13.1-beta
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfile
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Lint shell scripts

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args: [--fix]
        exclude: ^(CHANGELOG\.md|docs/.*\.md)$

  # Python dependency security check
  - repo: local
    hooks:
      - id: safety-check
        name: Security check dependencies with Safety
        entry: safety
        args: [check, --json]
        language: system
        pass_filenames: false
        files: requirements.*\.txt$

  # Python test runner (optional - can be slow)
  - repo: local
    hooks:
      - id: pytest-check
        name: Run fast tests
        entry: pytest
        args: [-x, --tb=short, -q, tests/test_hello.py]
        language: system
        pass_filenames: false
        always_run: false
        stages: [manual]

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.1
    hooks:
      - id: commitizen
        name: Check commit message format
        stages: [commit-msg]

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

# Custom configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-check, safety-check]  # Skip slow hooks in CI
  submodules: false
