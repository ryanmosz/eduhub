name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Job 1: Code Quality - Linting and Formatting
  lint:
    name: Code Quality (Linting & Formatting)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
        
    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Black (Code Formatting)
      run: |
        echo "üé® Checking code formatting with Black..."
        black --check --diff src tests
        
    - name: Run isort (Import Sorting)
      run: |
        echo "üì¶ Checking import sorting with isort..."
        isort --check-only --diff src tests
        
         - name: Run MyPy (Static Type Checking)
      run: |
        echo "üîç Running static type checking with MyPy..."
        mypy src --ignore-missing-imports --no-strict-optional || echo "‚ö†Ô∏è MyPy completed with warnings"
        
    - name: Run additional code quality checks
      run: |
        echo "üîß Running additional quality checks..."
        # Check for common Python issues
        python -m py_compile src/eduhub/__init__.py
        python -m py_compile src/eduhub/main.py
        python -m py_compile src/eduhub/plone_integration.py
        python -m py_compile src/hello/__init__.py

  # Job 2: Testing Matrix - Multiple Python Versions
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run pytest with coverage
      run: |
        echo "üß™ Running tests with pytest (Python ${{ matrix.python-version }})..."
        export PYTHONPATH="${PYTHONPATH}:./src"
        pytest tests/ \
          --verbose \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=60 \
          --junitxml=pytest-results-${{ matrix.python-version }}.xml
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: |
          pytest-results-${{ matrix.python-version }}.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 3: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        export PYTHONPATH="${PYTHONPATH}:./src"
        pytest tests/test_plone_integration.py -v --tb=short
        
    - name: Test FastAPI application startup
      run: |
        echo "üöÄ Testing FastAPI application startup..."
        export PYTHONPATH="${PYTHONPATH}:./src"
        timeout 10s python -c "
        import asyncio
        from src.eduhub.main import app
        print('‚úÖ FastAPI app imports successfully')
        print('‚úÖ App configuration valid')
        " || echo "‚ö†Ô∏è FastAPI startup test completed (timeout expected)"

  # Job 4: Security and Dependency Scanning
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety bandit
        
    - name: Run safety check (dependency vulnerabilities)
      run: |
        echo "üîí Checking for known security vulnerabilities..."
        safety check --json || echo "‚ö†Ô∏è Safety check completed with warnings"
        
    - name: Run bandit (security linting)
      run: |
        echo "üõ°Ô∏è Running security linting with bandit..."
        bandit -r src/ -f json || echo "‚ö†Ô∏è Bandit scan completed with warnings"

  # Job 5: Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/eduhub
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: false
        tags: eduhub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker container
      run: |
        echo "üß™ Testing Docker container startup..."
        docker run --rm -d --name eduhub-test \
          -p 8000:8000 \
          eduhub:test &
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        if curl -f http://localhost:8000/health; then
          echo "‚úÖ Docker container health check passed"
        else
          echo "‚ùå Docker container health check failed"
          docker logs eduhub-test
          exit 1
        fi
        
        # Stop test container
        docker stop eduhub-test
        
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and tag (PR only)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 6: Build Validation (Python Package)
  build:
    name: Python Package Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        echo "üì¶ Building Python package..."
        python -m build
        
    - name: Check package
      run: |
        echo "üîç Validating package..."
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Job 7: Quality Gates & Summary
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint, test, integration, security, docker, build]
    if: always()
    
    steps:
    - name: Evaluate Quality Gates
      id: gates
      run: |
        echo "üéØ Evaluating Quality Gates..."
        
        # Core quality gates (must pass)
        LINT_STATUS="${{ needs.lint.result }}"
        TEST_STATUS="${{ needs.test.result }}"
        INTEGRATION_STATUS="${{ needs.integration.result }}"
        BUILD_STATUS="${{ needs.build.result }}"
        
        # Optional gates (warnings allowed)
        SECURITY_STATUS="${{ needs.security.result }}"
        DOCKER_STATUS="${{ needs.docker.result }}"
        
        echo "=== CORE QUALITY GATES ==="
        echo "‚úì Code Quality (Lint): $LINT_STATUS"
        echo "‚úì Unit Tests: $TEST_STATUS" 
        echo "‚úì Integration Tests: $INTEGRATION_STATUS"
        echo "‚úì Build Validation: $BUILD_STATUS"
        
        echo "=== OPTIONAL GATES ==="
        echo "‚ö† Security Scan: $SECURITY_STATUS"
        echo "‚ö† Docker Build: $DOCKER_STATUS"
        
        # Check core gates
        CORE_FAILED=0
        if [[ "$LINT_STATUS" != "success" ]]; then
          echo "‚ùå GATE FAILED: Code quality checks failed"
          CORE_FAILED=1
        fi
        
        if [[ "$TEST_STATUS" != "success" ]]; then
          echo "‚ùå GATE FAILED: Unit tests failed"
          CORE_FAILED=1
        fi
        
        if [[ "$INTEGRATION_STATUS" != "success" ]]; then
          echo "‚ùå GATE FAILED: Integration tests failed"  
          CORE_FAILED=1
        fi
        
        if [[ "$BUILD_STATUS" != "success" ]]; then
          echo "‚ùå GATE FAILED: Build validation failed"
          CORE_FAILED=1
        fi
        
        # Set outputs
        if [[ $CORE_FAILED -eq 0 ]]; then
          echo "‚úÖ ALL CORE QUALITY GATES PASSED"
          echo "core_gates=success" >> $GITHUB_OUTPUT
          echo "overall_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå CORE QUALITY GATES FAILED"
          echo "core_gates=failure" >> $GITHUB_OUTPUT
          echo "overall_status=failure" >> $GITHUB_OUTPUT
        fi
        
        # Count warnings
        WARNING_COUNT=0
        if [[ "$SECURITY_STATUS" != "success" ]]; then
          WARNING_COUNT=$((WARNING_COUNT + 1))
        fi
        if [[ "$DOCKER_STATUS" != "success" ]]; then
          WARNING_COUNT=$((WARNING_COUNT + 1))
        fi
        
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        
    - name: Quality Gates Report
      run: |
        echo "## üéØ Quality Gates Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Core Gates (Must Pass)" >> $GITHUB_STEP_SUMMARY
        echo "| Gate | Status | Requirement |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Black, isort, MyPy |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | 60%+ coverage, Python 3.9/3.11 |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Plone-FastAPI bridge |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Package validation |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Optional Gates (Warnings)" >> $GITHUB_STEP_SUMMARY
        echo "| Gate | Status | Note |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '‚úÖ Clean' || '‚ö†Ô∏è Warnings' }} | Safety, Bandit |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result == 'success' && '‚úÖ Built' || '‚ö†Ô∏è Issues' }} | Container build/push |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.gates.outputs.core_gates }}" == "success" ]]; then
          echo "### ‚úÖ Quality Gates: **PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "All core quality requirements met. Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Quality Gates: **FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "Core quality requirements not met. Review failed checks before deployment." >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.gates.outputs.warning_count }}" -gt 0 ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **${{ steps.gates.outputs.warning_count }} warnings** found in optional gates." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Fail on quality gate failure
      if: steps.gates.outputs.core_gates == 'failure'
      run: |
        echo "‚ùå Quality gates failed - blocking deployment"
        exit 1
 